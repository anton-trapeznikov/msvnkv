# Generated by Django 2.1.7 on 2019-03-20 10:50

import blog.utils
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('preferences', '0002_auto_20181220_0803'),
    ]

    operations = [
        migrations.CreateModel(
            name='AboutPage',
            fields=[
                ('preferences_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='preferences.Preferences')),
                ('title', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега title для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Title')),
                ('keywords', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега keywords для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Keywords')),
                ('description', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега description для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Description')),
                ('photo', models.ImageField(blank=True, null=True, upload_to=blog.utils.unique_upload_path, verbose_name='Фото в левой части страницы')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текстовое содержимое')),
            ],
            options={
                'verbose_name_plural': 'Страница "About"',
                'verbose_name': 'Страница "About"',
            },
            bases=('preferences.preferences', models.Model),
            managers=[
                ('singleton', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Config',
            fields=[
                ('preferences_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='preferences.Preferences')),
                ('homepage_title_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега title.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Title')),
                ('homepage_keywords_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега keywords.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Keywords')),
                ('homepage_description_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега description.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Description')),
                ('flatpage_title_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега title.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Title')),
                ('flatpage_keywords_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега keywords.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Keywords')),
                ('flatpage_description_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега description.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Description')),
                ('blog_title_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега title.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Title')),
                ('blog_keywords_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега keywords.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Keywords')),
                ('blog_description_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега description.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Description')),
                ('works_title_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега title.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Title')),
                ('works_keywords_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега keywords.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Keywords')),
                ('works_description_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега description.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Description')),
                ('post_title_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега title.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Title')),
                ('post_keywords_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега keywords.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Keywords')),
                ('post_description_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега description.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Description')),
                ('project_title_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега title.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Title')),
                ('project_keywords_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега keywords.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Keywords')),
                ('project_description_pattern', models.CharField(blank=True, default='', help_text='\n            Определяет шаблон метатега description.\n            Если в шаблоне присутствует переменная __V__, то\n            в метатеге страницы сайта эта переменная будет\n            замена значением соответствующего поля для текущей сущности.\n        ', max_length=512, verbose_name='Шаблон Description')),
                ('robots_txt', models.TextField(blank=True, null=True, verbose_name='Содержимое файла robots.txt')),
                ('head_injection', models.TextField(blank=True, help_text='\n            Содержимое поля будет "как есть" добавлено в конец\n            секции HEAD для любой html-страницы сайта.\n        ', null=True, verbose_name='Вставка в конец секции HEAD')),
                ('body_injection', models.TextField(blank=True, help_text='\n            Содержимое поля будет "как есть" добавлено в конец\n            секции HEAD для любой html-страницы сайта.\n        ', null=True, verbose_name='Вставка в конец секции BODY')),
            ],
            options={
                'verbose_name_plural': 'Настройки',
                'verbose_name': 'Настройки',
            },
            bases=('preferences.preferences',),
            managers=[
                ('singleton', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Homepage',
            fields=[
                ('preferences_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='preferences.Preferences')),
                ('title', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега title для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Title')),
                ('keywords', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега keywords для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Keywords')),
                ('description', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега description для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Description')),
                ('text', models.TextField(blank=True, null=True, verbose_name='Текстовое содержимое')),
            ],
            options={
                'verbose_name_plural': 'Главная страница',
                'verbose_name': 'Главная страница',
            },
            bases=('preferences.preferences', models.Model),
            managers=[
                ('singleton', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Ключ ЧПУ')),
                ('title', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега title для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Title')),
                ('keywords', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега keywords для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Keywords')),
                ('description', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега description для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Description')),
                ('is_published', models.BooleanField(blank=True, db_index=True, default=True, help_text='\n            Если флажок снят, то материал не будет присутствовать на сайте.\n        ', verbose_name='Опубликован')),
                ('publication_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='Дата публикации')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('heading', models.CharField(max_length=512, verbose_name='Заголовок')),
                ('content', models.TextField(verbose_name='Основное содержимое')),
            ],
            options={
                'verbose_name_plural': 'Записи блога',
                'verbose_name': 'Запись блога',
            },
        ),
        migrations.CreateModel(
            name='PostTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='blog.Post', verbose_name='Запись')),
            ],
            options={
                'verbose_name_plural': 'Теги',
                'verbose_name': 'Тег',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Ключ ЧПУ')),
                ('title', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега title для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Title')),
                ('keywords', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега keywords для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Keywords')),
                ('description', models.CharField(blank=True, default='', help_text='\n            Подставляется в качестве переменной __V__ в общий шаблон\n            метатега description для сайта. Если значение не задано, то\n            в шаблон подставляется заголовок сущности (название, имя, и т.д.).\n        ', max_length=255, verbose_name='Description')),
                ('is_published', models.BooleanField(blank=True, db_index=True, default=True, help_text='\n            Если флажок снят, то материал не будет присутствовать на сайте.\n        ', verbose_name='Опубликован')),
                ('publication_date', models.DateField(blank=True, db_index=True, null=True, verbose_name='Дата публикации')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('heading', models.CharField(max_length=512, verbose_name='Заголовок')),
                ('content', models.TextField(verbose_name='Основное содержимое')),
                ('sub_heading', models.CharField(max_length=512, verbose_name='Подзаголовок')),
                ('image_preview', models.ImageField(upload_to=blog.utils.unique_upload_path, verbose_name='Изображение для списка')),
            ],
            options={
                'verbose_name_plural': 'Проекты',
                'verbose_name': 'Проект',
            },
        ),
        migrations.CreateModel(
            name='ProjectTags',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tags', to='blog.Project', verbose_name='Проект')),
            ],
            options={
                'verbose_name_plural': 'Теги',
                'verbose_name': 'Тег',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(max_length=255, unique=True, verbose_name='Ключ ЧПУ')),
                ('name', models.CharField(help_text='Название тега', max_length=512, verbose_name='Метка')),
            ],
            options={
                'verbose_name_plural': 'Теги',
                'verbose_name': 'Тег',
                'ordering': ['name'],
            },
        ),
        migrations.AddField(
            model_name='projecttags',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Tag', verbose_name='Тег'),
        ),
        migrations.AddField(
            model_name='posttags',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='blog.Tag', verbose_name='Тег'),
        ),
        migrations.AlterUniqueTogether(
            name='projecttags',
            unique_together={('project', 'tag')},
        ),
        migrations.AlterUniqueTogether(
            name='posttags',
            unique_together={('post', 'tag')},
        ),
    ]
